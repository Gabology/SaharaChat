@model SaharaChat.Models.CreateAccountViewModel

@{
    Layout = "~/Views/Shared/_ErikLayout.cshtml";
}

    @using (Html.BeginForm()) 
    {
        @Html.AntiForgeryToken()
        
        <div class="form-horizontal">
            <h4>Create Account</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>        
                    
            <div class="form-group">
                @Html.LabelFor(model => model.RepeatPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RepeatPassword, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RepeatPassword, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Color, "", new { htmlAttributes = new { @class = "form-control"} })
                    @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                    <color-picker width="200" height="200" style="display:block"></color-picker>
                    <div style="width: 200px; height: 30px; border: solid 1px #eee;" id="colorDisplay"></div>
                </div>
            </div>

    
            <div class="form-group">
                <div class="col-md-offset-2 col-md-2">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>

   
    }
    
  

@section scripts
{
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script> 
    <link rel="import" href="/Content/color-picker.html"> <!-- our custom color picker element -->


    <!-- Old color picker below:
        <script src="~/Scripts/spectrum.js"></script>
        <script src="~/Scripts/colorStyle.js" defer></script>
        <link rel="stylesheet" href="~/Content/StyleSheet.css" />
    -->
}


<script type="text/javascript">
    var cp = document.querySelector('color-picker');
    var display = document.getElementById('colorDisplay');
    var output = document.getElementById('Color');
    //listen for 'colorselected' event on the color-picker element which returns a details param with hex and rgb values
    cp.addEventListener('colorselected', function (e) {
        //output.innerHTML = e.detail.hex + ' (r=' + e.detail.rgb.r + ', g=' + e.detail.rgb.g + ', b=' + e.detail.rgb.b + ')';
        display.style.backgroundColor = e.detail.hex;
        $(output).val(e.detail.hex);
    });
</script>