@model SaharaChat.Models.Avatar

@{
    Layout = "~/Views/Shared/_ErikLayout.cshtml";
}
@section scripts
{
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <script src="~/Scripts/json2.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="http://code.createjs.com/easeljs-0.8.0.min.js"></script>
    <script src="https://code.createjs.com/tweenjs-0.6.0.min.js"></script>
}

<div id="stage">
    <canvas id="myCanvas" width="1000" height="500" onclick="drawIt(event)"></canvas>
</div>

<input type="text" id="inTb" />
<button id="sendMsgBtn">Send</button>

<div id="log"
     style="
    font-size: 14px;
    width:900px;
    height:200px;
    background:#333;
    padding:0.5em;
    overflow:auto;
    color:#fff;
    font-family:monospace;"></div>

<script defer>
    var clients = {}
    var hub = $.connection.gameHub;
    var connected = false;

    var local2 = @Html.Raw(Json.Encode(Model));
    var canvas = document.getElementById('myCanvas');
    var stage = new createjs.Stage("myCanvas");
    var myCircle = new createjs.Shape();
    myCircle.graphics.beginFill(local2.Color).drawCircle(0, 0, 20);

    var local = { "circle": myCircle };
    stage.addChild(local.circle);

    createjs.Ticker.setFPS(60);
    createjs.Ticker.addEventListener("tick", stage);

    function getMousePos(canvas, pos) {
        var rect = canvas.getBoundingClientRect();
        return {
            x: pos.clientX - rect.left,
            y: pos.clientY - rect.top
        };
    }

    $("#inTb").keypress(function(e) {
        if(e.which == 13) {
            $("#sendMsgBtn").click();
            this.value = "";
        }
    })

    hub.client.printMessage = function(msg) {
        console.log(msg);
        $("#log").prepend(msg + "<br>");
    }

    $("#sendMsgBtn").click(function() {
        hub.server.sendMessage($("#inTb").val())
            .done(function() { console.log("Message sent") })
            .fail(function () { console.log("Failed to send message")});
        this.value = "";
    })

    hub.client.printLog = function (json) {
        var obj = JSON.parse(json);
        $.each(obj, function (i, line) {
            $("#log").prepend(line.split("\\n").join("<br>") + "<br>");
        });
    }

    hub.client.updatePositionOf = function (username, x, y) {
        if (!clients.hasOwnProperty(username)) {
            clients[username] = { "circle": new createjs.Shape() }
            clients[username].circle.graphics.beginFill("Red").drawCircle(x, y, 20);
            stage.addChild(clients[username].circle);
            stage.update()
        }
        else {
            var abX = clients[username].circle.x;
            var abY = clients[username].circle.y;
            var hypotenuse = Math.sqrt(abX * abX + abY * abY);

            createjs.Tween.get(clients[username].circle, {override: true})
                .to({'x':x, 'y':y }, hypotenuse * 2.0, createjs.Ease.linear());
        }
    }

    function drawIt(e) {
        var position = getMousePos(canvas, e);
        
        var x = local.circle.x - position.x;
        var y = local.circle.y - position.y;
        var hypotenuse = Math.sqrt(x * x + y * y);

        createjs.Tween.get(local.circle, {override: true})
            .to({ x : position.x, y: position.y }, hypotenuse * 2.0, createjs.Ease.linear());

        hub.server.sendPosition(position.x, position.y)
            .done(function () { console.log("(CLIENT) Successfully sent updated position to server!") })
            .fail(function (error) { console.log("(CLIENT) Failed to send position to server, error: " + error) });
    }

    function getLog() {
        hub.server.getLog();
        return "Server log requested..."
    }

    $.connection.hub.start()
        .done(function () { console.log("(CLIENT) Connected!"); })
        .fail(function () { console.log("Connection to server failed") });
</script>

