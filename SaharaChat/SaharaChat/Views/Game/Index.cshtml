@model SaharaChat.Models.Avatar

@{
    Layout = "~/Views/Shared/_ErikLayout.cshtml";
}
@section scripts
{
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <script src="~/Scripts/json2.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="http://code.createjs.com/easeljs-0.8.0.min.js"></script>
    <script src="https://code.createjs.com/tweenjs-0.6.0.min.js"></script>
}

<div id="stage">
    <canvas id="myCanvas" width="1000" height="500" onclick="drawIt(event)"></canvas>
</div>

<input type="text" id="inTb" />
<button id="sendMsgBtn">Send</button>

<div id="log"
     style="
    font-size: 14px;
    width:900px;
    height:200px;
    background:#333;
    padding:0.5em;
    overflow:auto;
    color:#fff;
    font-family:monospace;"></div>

<script defer>
    var clients = {}
    var hub = $.connection.gameHub;

    var local2 = @Html.Raw(Json.Encode(Model));
    var canvas = document.getElementById('myCanvas');
    var stage = new createjs.Stage("myCanvas");
    var myBubble = new createjs.Graphics().beginFill("Beige").drawRoundRect(30, 30, 0, 0, 0);   //Begin with "invisible" bubble
    var cmd = myBubble.command;
    var bubbleTimer; 

    var myCircle = new createjs.Shape(myBubble);
    myCircle.graphics.beginFill(local2.Color).drawCircle(0, 0, 20);

    var local = { circle : myCircle,
                  bubble : myBubble };

    var palm1 = new createjs.Bitmap("/Content/palm-tree-on-island-hi.png");
    palm1.x = 100;
    palm1.y = 100;
    var palm2 = new createjs.Bitmap("/Content/palm-tree-on-island-hi.png");
    palm2.x = 400;
    palm2.y = 400;
    var palm3 = new createjs.Bitmap("/Content/palm-tree-on-island-hi.png");
    palm3.x = 650;
    palm3.y = 250;
    var skeleton = new createjs.Bitmap("/Content/animalskull.png");
    skeleton.x = 250;
    skeleton.y = 202;

    stage.addChild(palm1);
    stage.addChild(palm2);
    stage.addChild(palm3);
    stage.addChild(skeleton);
    stage.addChild(local.circle);

    // Text must be added after bubble for correct z order
    var myText = new createjs.Text("", "20px Arial", "#ff7700");
    myText.x = 40;
    myText.y = 40;
    myText.lineWidth = 200;
    
    stage.addChild(myText);




    // Create the sprite sheet
    var spritesheet = new createjs.SpriteSheet({
        images: ['/Content/tiger.png'],
        frames: {width: 200, height: 100},
        animations: {
            run: {
                frames: [0, 1, 2, 3, 4, 5, 6, 7],
                speed: 0.5
            }
        }
    });

    // Create the bitmap animation from the spritesheet
    // and display the standing
    var tiger = new createjs.Sprite(spritesheet);
    tiger.scaleX = -1;
    tiger.x = -200;
    tiger.y = -100;
    tiger.gotoAndPlay('run');

    // Display container on screen
    stage.addChild(tiger);

    window.setInterval(animateTiger, 10000);

    function animateTiger()
    {
        tiger.scaleX = tiger.scaleX * -1; //flip x
        var toX = tiger.x + (1200 * tiger.scaleX);
        createjs.Tween.get(tiger).to({x:toX, y:600*Math.random()-100}, 2000);

    }

    // Reset player 1 second after death sequence finishes playing
    /*player.onAnimationEnd = function() {
        setTimeout(function() {
            player.gotoAndStop('die');
        }, 1000);
    }; */


    createjs.Ticker.setFPS(25);
    createjs.Ticker.addEventListener("tick", stage);

    function clearBubble(bubble, text) {
        bubble.h = 0;        bubble.w = 0;
        bubble.radiusBL = 0; bubble.radiusBR = 0;
        bubble.radiusTL = 0; bubble.radiusTR = 0;

        text.text = "";
    }

    function getMousePos(canvas, pos) {
        var rect = canvas.getBoundingClientRect();
        return {
            x: pos.clientX - rect.left,
            y: pos.clientY - rect.top
        };
    }

    $("#inTb").keypress(function(e) {
        if(e.which == 13) {
            $("#sendMsgBtn").click();
            this.value = "";
        }
    })

    hub.client.printMessage = function(username, msg) {
        console.log(username + ": " + msg);
        $("#log").prepend(username + ": " + msg + "<br>");

        if (clients.hasOwnProperty(username)) {
            //Update local bubble
            clients[username].text.text = msg;

            //Get text size and set bubble size
            var bounds = clients[username].text.getBounds();
            var bubbleX = bounds.width + 20;
            var bubbleY = bounds.height + 20;
            var bubble = clients[username].bubblecmd;
            bubble.h = bubbleY;  bubble.w = bubbleX;
            bubble.radiusBL = 4; bubble.radiusBR = 4;
            bubble.radiusTL = 4; bubble.radiusTR = 4;

            //Clear bubble and text after X secs
            //Remember to clear bubbleTimer first, otherwise an old timer will fire (it seems)
            clearTimeout(clients[username].bubbleTimer);
            clients[username].bubbleTimer = setTimeout(function() { clearBubble(clients[username].bubblecmd, clients[username].text) }, 5000);
        }
    }

    $("#sendMsgBtn").click(function() {
        hub.server.sendMessage($("#inTb").val())
            .done(function() { console.log("Message sent") })
            .fail(function() { console.log("Failed to send message")});
        this.value = "";

        //Update local bubble
        myText.text = $("#inTb").val();

        //Get text size and set bubble size
        var bounds = myText.getBounds();
        var bubbleX = bounds.width + 20;
        var bubbleY = bounds.height + 20;
        var bubble = cmd;
        bubble.h = bubbleY;  bubble.w = bubbleX;
        bubble.radiusBL = 4; bubble.radiusBR = 4;
        bubble.radiusTL = 4; bubble.radiusTR = 4;

        //Clear bubble and text after X secs
        //Remember to clear bubbleTimer first, otherwise an old timer will fire (it seems)
        clearTimeout(bubbleTimer);
        bubbleTimer = setTimeout(function() { clearBubble(cmd, myText) }, 5000);
    })

    hub.client.printLog = function (json) {
        var obj = JSON.parse(json);
        $.each(obj, function (i, line) {
            $("#log").prepend(line.split("\\n").join("<br>") + "<br>");
        });
    }

    hub.client.updatePositionOf = function (username, avatar) {
        if (!clients.hasOwnProperty(username)) {
            clients[username] = { 
/*                "circle": new createjs.Shape(),
                "text" :  new createjs.Text("", "20px Arial", "#ff7700"),
                "bubble" : new createjs.Graphics().beginFill("Beige").drawRoundRect(30, 30, 0, 0, 0),   //Begin with "invisible" bubble */
            }

            clients[username].bubble = new createjs.Graphics().beginFill("Beige").drawRoundRect(30, 30, 0, 0, 0);   //Begin with "invisible" bubble
            clients[username].bubblecmd = clients[username].bubble.command;     //Must get this handle BEFORE creating a circle on top of graphics handle
            clients[username].circle = new createjs.Shape(clients[username].bubble);
            clients[username].circle.graphics.beginFill(avatar.color).drawCircle(0, 0, 20);
            clients[username].bubbleTimer;  // Is this an empty var now?
            stage.addChild(clients[username].circle);

            //text
            clients[username].text = new createjs.Text("", "20px Arial", "#ff7700");
            clients[username].text.x = 40;
            clients[username].text.y = 40;
            clients[username].text.lineWidth = 200;
            clients[username].text.text = "";
            stage.addChild(clients[username].text);

            stage.update()
        }

        var abX = clients[username].circle.x - avatar.x;
        var abY = clients[username].circle.y - avatar.y;
        var hypotenuse = Math.sqrt(abX * abX + abY * abY);

        createjs.Tween.get(clients[username].circle, {override: true})
            .to({ x : avatar.x, y : avatar.y }, hypotenuse * 2.0, createjs.Ease.linear());

        createjs.Tween.get(clients[username].text, {override: true})
            .to({ x : avatar.x + 40, y : avatar.y + 40}, hypotenuse * 2.0, createjs.Ease.linear());


    }

    function drawIt(e) {
        var position = getMousePos(canvas, e);

        var x = local.circle.x - position.x;
        var y = local.circle.y - position.y;
        var hypotenuse = Math.sqrt(x * x + y * y);

        createjs.Tween.get(local.circle, {override: true})
            .to({ x : position.x, y: position.y }, hypotenuse * 2.0, createjs.Ease.linear());

        createjs.Tween.get(myText, {override: true})
            .to({ x : position.x + 40, y: position.y + 40 }, hypotenuse * 2.0, createjs.Ease.linear());

        hub.server.sendPosition(local2.Color, position.x, position.y)
            .done(function() { console.log("(CLIENT) Successfully sent updated position to server!") })
            .fail(function(error) { console.log("(CLIENT) Failed to send position to server, error: " + error) });
    }

    function getLog() {
        hub.server.getLog();
        return "Server log requested..."
    }

    $.connection.hub.start()
        .done(function() { console.log("(CLIENT) Connected!"); })
        .fail(function() { console.log("Connection to server failed") });
</script>

